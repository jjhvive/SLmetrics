[{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement serkor1@duck.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://serkor1.github.io/SLmetrics/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://serkor1.github.io/SLmetrics/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://serkor1.github.io/SLmetrics/articles/SLmetrics.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"{SLmetrics}: Machine learning performance evaluation on steroids","text":"{SLmetrics} low-level R package supervised AI/ML performance evaluation. uses {Rcpp} {RcppEigen} backend memory efficient fast execution various metrics. {SLmetrics} follows syntax base R, uses S3-classes.","code":""},{"path":"https://serkor1.github.io/SLmetrics/articles/SLmetrics.html","id":"why","dir":"Articles","previous_headings":"","what":"Why?","title":"{SLmetrics}: Machine learning performance evaluation on steroids","text":"currently packages bridges gap R Python terms AI/ML performance evaluation; {MLmetrics}, {yardstick}, {mlr3measures}{metrica}. {MLmetrics} can considered legacy code comes performance evaluation, served backend {yardstick} version 0.0.2. built entirely base R, stable since inception almost 10 years ago. However, appears development reached ’s peak currently stale - see, example, stale PR related issue. Micro- macro-averages implented {scikit-learn} many years, {MLmetrics} simply didn’t keep development. {yardstick}, hand, carried torch forward implemented modern features. {yardstick} closely follows syntax, naming functionality {scikit-learn} built {tidyverse} tools; although source code nice look , introduce serious overhead carries risk deprecations. Furthermore, complicates simple application verbose function naming, see example metric()-function <tbl> metric_vec()-function <numeric> - output , call different. {yardstick} can’t handle one positive class time, end-user forced run function get performance metrics adjacent classes. {SLmetrics}, name suggests, closely resembles {MLmetrics} simplicity, similarity ends. {SLmetrics} reflects simplicity application; comparing two vectors. functionality features closely follows {scikit-learn} {pytorch} - significant edge two, alongside R packages, comes speed, efficiency user-friendliness; uses c++ backend, S3-classes frontend (See speed comparison)","code":""},{"path":"https://serkor1.github.io/SLmetrics/articles/SLmetrics.html","id":"basic-usage-classification","dir":"Articles","previous_headings":"","what":"Basic usage: classification","title":"{SLmetrics}: Machine learning performance evaluation on steroids","text":"","code":"# 1) recode iris # to binary problem iris$Species <- factor(   x = as.numeric(     iris$Species == \"virginica\"   ),   levels = c(1,0),   labels = c(\"virginica\", \"others\") )  # 2) fit the logistic # regression model <- glm(   formula = Species ~ Sepal.Length + Sepal.Width,   data    = iris,   family = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- as.factor(   ifelse(     predict(model, type = \"response\") > 0.5,     yes = \"virginica\",     no  = \"others\"   ) ) # 1) construct confusion # matrix confusion_matrix <- cmatrix(   actual    = iris$Species,   predicted = predicted )  # 2) visualize # confusion matrix plot(   confusion_matrix ) # 3) summarise  # confusion matrix summary(   confusion_matrix ) #> Confusion Matrix (2 x 2)  #> ================================================================================ #>           virginica others #> virginica        35     15 #> others           14     86 #> ================================================================================ #> Overall Statistics (micro average) #>  - Accuracy:          0.81 #>  - Balanced Accuracy: 0.78 #>  - Sensitivity:       0.81 #>  - Specificity:       0.81 #>  - Precision:         0.81"},{"path":"https://serkor1.github.io/SLmetrics/articles/classification_problems.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"{SLmetrics}: Classification","text":"section setup essential workflow using {SLmetrics} {lightgbm}.","code":""},{"path":"https://serkor1.github.io/SLmetrics/articles/classification_problems.html","id":"the-data","dir":"Articles","previous_headings":"Setup","what":"The data","title":"{SLmetrics}: Classification","text":"","code":"# 1) load data # from {mlbench} data(\"Glass\", package = \"mlbench\") # 1.1) define the features # and outcomes outcome  <- c(\"Type\") features <- setdiff(x = colnames(Glass), y = outcome)  # 2) split data in training # and test  # 2.1) set seed for  # for reproducibility set.seed(1903)  # 2.2) exttract # indices with a simple # 80/10 split index <- sample(1:nrow(Glass), size = 0.8 * nrow(Glass))  # 1.1) extract training # data and construct # as lgb.Dataset train <- Glass[index,] dtrain <- lightgbm::lgb.Dataset(     data  = data.matrix(train[,features]),     label = train$Type ) # 1.2) extract test # data test <- Glass[-index,]   # 1.2.1) extract actual # values and constuct # as.factor for {SLmetrics} # methods actual <- as.factor(     test$Type )  # 1.2.2) construct as data.matrix # for predict method test <- data.matrix(     test[,features] )"},{"path":"https://serkor1.github.io/SLmetrics/articles/classification_problems.html","id":"setting-up-parameters","dir":"Articles","previous_headings":"Setup","what":"Setting up parameters","title":"{SLmetrics}: Classification","text":"","code":"# 1) define parameters # across the vignette parameters <- list(     objective     = \"multiclass\",     num_leaves    = 4L,     learning_rate = 0.5,     num_class     = 8 )"},{"path":"https://serkor1.github.io/SLmetrics/articles/classification_problems.html","id":"evaluation-function-f-score","dir":"Articles","previous_headings":"Setup","what":"Evaluation function: F score","title":"{SLmetrics}: Classification","text":"custom evaluation function use \\(F_{score}\\) \\(\\beta = 2\\) emphasize precision imporant recall. function defined , \\[ f_\\beta = (1 + \\beta^2) \\cdot \\frac{precision \\cdot recall}{(\\beta^2 \\cdot precision) + recall} \\] fbeta()-function returns vector scores class. want maximize micro-average.","code":"# 1) define the custom # evaluation metric evaluation_metric <- function(     dtrain,      preds) {          # 1) extract values         actual    <- as.factor(dtrain)         predicted <- lightgbm::get_field(preds, \"label\")         value     <- fbeta(             actual    = actual,             predicted = predicted,             beta      = 2,             micro     = TRUE         )          # 2) construnct output         # list         list(             name          = \"fbeta\",             value         = value,             higher_better = TRUE          )      }"},{"path":"https://serkor1.github.io/SLmetrics/articles/classification_problems.html","id":"training-model","dir":"Articles","previous_headings":"","what":"Training model","title":"{SLmetrics}: Classification","text":"train model using lgb.train()-function,","code":"model <- lightgbm::lgb.train(     params  = parameters,     data    = dtrain,     nrounds = 10L,     eval    = evaluation_metric,     verbose = -1 )"},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/articles/classification_problems.html","id":"classification","dir":"Articles","previous_headings":"Performance Evaluation","what":"Classification","title":"{SLmetrics}: Classification","text":"extract predicted classes using predict()-function,","code":"# 1) prediction # from the model predicted <- as.factor(     predict(         model,         newdata = test,         type = \"class\"     ) ) # 1) construct confusion # matrix confusion_matrix <- cmatrix(     actual = actual,     predicted = predicted )  # 2) visualize plot(     confusion_matrix ) # 3) summarize summary(     confusion_matrix ) #> Confusion Matrix (6 x 6)  #> ================================================================================ #>    1  2  3  5  6  7 #> 1 13  2  1  0  0  0 #> 2  1 13  1  0  0  0 #> 3  0  0  2  0  0  0 #> 5  0  0  0  0  0  0 #> 6  0  0  0  1  2  0 #> 7  0  0  0  0  0  7 #> ================================================================================ #> Overall Statistics (micro average) #>  - Accuracy:          0.86 #>  - Balanced Accuracy: 0.87 #>  - Sensitivity:       0.86 #>  - Specificity:       0.97 #>  - Precision:         0.86"},{"path":"https://serkor1.github.io/SLmetrics/articles/classification_problems.html","id":"response","dir":"Articles","previous_headings":"Performance Evaluation","what":"Response","title":"{SLmetrics}: Classification","text":"extract response values using predict()-function, response can passed ROC()-function, ROC()-function returns data.frame-object, 258 rows corresponding length response multiplied number classes data. roc-object can plotted follows,  ROC()-function accepts custom threshold-argument, can passed follows, new object 60 rows.","code":"# 1) prediction # from the model response <- predict(         model,         newdata = test     ) # 1) calculate the reciever # operator characteristics roc <- ROC(     actual   = actual,     response = response )  # 2) print the roc # object print(roc) #>    threshold level label    fpr    tpr #> 1   3.60e-15     1     1 0.0370 0.0000 #> 2   2.70e-15     1     1 0.0370 0.0625 #> 3   1.46e-15     1     1 0.0741 0.0625 #> 4   1.16e-15     1     1 0.1111 0.0625 #> 5   1.15e-15     1     1 0.1481 0.0625 #> 6   1.12e-15     1     1 0.1852 0.0625 #> 7   1.03e-15     1     1 0.2222 0.0625 #> 8   9.87e-16     1     1 0.2222 0.1250 #> 9   9.45e-16     1     1 0.2593 0.1250 #> 10  9.36e-16     1     1 0.2963 0.1250 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 248 rows ] # 1) plot roc # object plot(roc) # 1) create custom # thresholds thresholds <- seq(     from = min(roc$threshold),     to   = max(roc$threshold),     length.out = 10 )  # 2) pass the custom thresholds # to the ROC()-function roc <- ROC(     actual     = actual,     response   = response,     thresholds = thresholds  )  # 3) print the roc # object print(roc) #>    threshold level label    fpr    tpr #> 1   3.60e-15     1     1 0.0370 0.0000 #> 2   3.20e-15     1     1 0.0370 0.0000 #> 3   2.80e-15     1     1 0.0370 0.0000 #> 4   2.40e-15     1     1 0.0370 0.0625 #> 5   2.01e-15     1     1 0.0370 0.0625 #> 6   1.61e-15     1     1 0.0370 0.0625 #> 7   1.21e-15     1     1 0.0741 0.0625 #> 8   8.11e-16     1     1 0.3704 0.1875 #> 9   4.12e-16     1     1 0.6296 0.4375 #> 10  1.37e-17     1     1 1.0000 1.0000 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 50 rows ] # 1) viasualize # ROC plot(roc) # 1) summarise ROC summary(roc) #> Reciever Operator Characteristics  #> ================================================================================ #> AUC #>  - 1: 0.387 #>  - 2: 0.749 #>  - 3: 0.39 #>  - 5: 0 #>  - 6: 0.812 #>  - 7: 0.167"},{"path":"https://serkor1.github.io/SLmetrics/articles/regression_problems.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"{SLmetrics}: Regression","text":"section setup essential workflow using {SLmetrics} {xgboost}.","code":""},{"path":"https://serkor1.github.io/SLmetrics/articles/regression_problems.html","id":"the-data","dir":"Articles","previous_headings":"Setup","what":"The data","title":"{SLmetrics}: Regression","text":"","code":"# 1) load data # from {mlbench} data(\"BostonHousing\", package = \"mlbench\") # 1.1) define the features # and outcomes outcome  <- c(\"medv\") features <- setdiff(     x = colnames(BostonHousing),      y = outcome     )  # 2) split data in training # and test  # 2.1) set seed for  # for reproducibility set.seed(1903)  # 2.2) exttract # indices with a simple # 90/10 split index <- sample(1:nrow(BostonHousing), size = 0.9 * nrow(BostonHousing))  # 1.1) extract training # data and construct # as lgb.Dataset train <- BostonHousing[index,]  # 1.1.1) convert # to DMatrix dtrain <- xgboost::xgb.DMatrix(     data = data.matrix(train[, features]),     label = data.matrix(train[, outcome]) )   # 1.2) extract test # data test <- BostonHousing[-index,]  # 1.2.1) convert to DMatrix dtest <-  xgboost::xgb.DMatrix(     data = data.matrix(test[, features]),     label = data.matrix(test[, outcome]) )  # 1.2.2) extract actual # outcome actual <- test$medv"},{"path":"https://serkor1.github.io/SLmetrics/articles/regression_problems.html","id":"set-parameters","dir":"Articles","previous_headings":"Setup","what":"Set parameters","title":"{SLmetrics}: Regression","text":"","code":"# 1) define parameters # across the vignette parameters <- list(     max_depth = 2,      eta = 1 )"},{"path":"https://serkor1.github.io/SLmetrics/articles/regression_problems.html","id":"evaluation-function-relative-root-mean-squared-error-rrmse","dir":"Articles","previous_headings":"Setup","what":"Evaluation function: Relative Root Mean Squared Error (RRMSE)","title":"{SLmetrics}: Regression","text":"function defined , \\[ \\text{RRMSE} = \\sqrt{\\frac{\\sum_{=1}^n (y_i - \\upsilon_i)^2}{\\sum_{=1}^n (y_i - \\bar{y})^2}} \\] \\(y_i\\) actual values, \\(\\upsilon_i\\) predicted values \\(\\bar{y}\\) mean \\(y\\).","code":"# 1) define the custom # evaluation metric evaluation_metric <- function(     preds,      dtrain) {          # 1) extract values         actual    <- xgboost::getinfo(dtrain, \"label\")         predicted <- preds         value     <- rrmse(             actual    = actual,             predicted = predicted         )          # 2) construnct output         # list         list(             metric = \"RRMSE\",             value  = value         )      }"},{"path":"https://serkor1.github.io/SLmetrics/articles/regression_problems.html","id":"training-model","dir":"Articles","previous_headings":"","what":"Training model","title":"{SLmetrics}: Regression","text":"train model using xgb.train()-function,","code":"# 1) model training model <- xgboost::xgb.train(     params  = parameters,     data    = dtrain,     nrounds = 10L,     verbose = 0,     feval   = evaluation_metric,     watchlist = list(         train = dtrain,         test  = dtest     ),     maximize = FALSE )"},{"path":"https://serkor1.github.io/SLmetrics/articles/regression_problems.html","id":"performance-evaluation","dir":"Articles","previous_headings":"","what":"Performance Evaluation","title":"{SLmetrics}: Regression","text":"extract predicted values using predict()-function, summarize performance using relative root mean squared error, root mean squared error concordance correlation coefficient","code":"# 1) out of sample # prediction predicted <- predict(     model,     newdata = dtest ) # 1) summarize all # performance measures  # in data.frame data.frame(     RRMSE  = rrmse(actual, predicted),      RMSE   = rmse(actual, predicted),     CCC    = ccc(actual, predicted) ) #>       RRMSE     RMSE       CCC #> 1 0.4578544 3.705342 0.8840924"},{"path":"https://serkor1.github.io/SLmetrics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Serkan Korkmaz. Maintainer, author, copyright holder.","code":""},{"path":"https://serkor1.github.io/SLmetrics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Korkmaz S (2024). SLmetrics: Machine Learning Performance Evaluation Steroids. R package version 0.1-1, https://serkor1.github.io/SLmetrics/.","code":"@Manual{,   title = {SLmetrics: Machine Learning Performance Evaluation on Steroids},   author = {Serkan Korkmaz},   year = {2024},   note = {R package version 0.1-1},   url = {https://serkor1.github.io/SLmetrics/}, }"},{"path":"https://serkor1.github.io/SLmetrics/index.html","id":"slmetrics-aiml-performance-evaluation-","dir":"","previous_headings":"","what":"Performance Evaluation","title":"Performance Evaluation","text":"{SLmetrics} low-level R package supervised AI/ML performance evaluation. uses {Rcpp} {RcppEigen} backend memory efficient fast execution various metrics. {SLmetrics} follows syntax base R, uses S3-classes.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/index.html","id":"shield-stable-version","dir":"","previous_headings":":information_source: Installation","what":"🛡️ Stable version","title":"Performance Evaluation","text":"","code":"## install stable release devtools::install_github(   repo = 'https://github.com/serkor1/SLmetrics@*release',   ref  = 'main' )"},{"path":"https://serkor1.github.io/SLmetrics/index.html","id":"hammer_and_wrench-development-version","dir":"","previous_headings":":information_source: Installation","what":":hammer_and_wrench: Development version","title":"Performance Evaluation","text":"","code":"## install development version devtools::install_github(   repo = 'https://github.com/serkor1/SLmetrics',   ref  = 'development' )"},{"path":"https://serkor1.github.io/SLmetrics/index.html","id":"information_source-code-of-conduct","dir":"","previous_headings":"","what":":information_source: Code of Conduct","title":"Performance Evaluation","text":"Please note {SLmetrics} project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/ROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — ROC.factor","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — ROC.factor","text":"ROC()-function computes tpr() fpr() thresholds provided \\(response\\)- \\(thresholds\\)-vector. function constructs data.frame() grouped \\(k\\)-classes class treated binary classification problem.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/ROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — ROC.factor","text":"","code":"# S3 method for class 'factor' ROC(actual, response, micro = NULL, thresholds = NULL, na.rm = TRUE, ...)  ROC(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/ROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — ROC.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. response <numeric>-vector length \\(n\\). estimated response probabilities. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. thresholds optional <numeric>-vector non-zero length. NULL default. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/ROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — ROC.factor","text":"data.frame following form, thresholds <numeric> Thresholds used determine tpr() fpr() level <character> level actual <factor> label <character> levels actual <factor> fpr <numeric> false positive rate tpr <numeric> true positve rate","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/ROC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — ROC.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/ROC.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — ROC.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\#TN_k}{\\#TN_k+\\#FP_k} $$ \\(\\#TN_k\\) \\(\\#FP_k\\) number true negatives false positives, respectively, class \\(k\\). aggregate = TRUE micro-average calculated, $$   \\frac{\\sum_{k=1}^k \\#TN_k}{\\sum_{k=1}^k \\#TN_k + \\sum_{k=1}^k \\#FP_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/ROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — ROC.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes response <-predict(model, type = \"response\")  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) generate reciever # operator characteristics roc <- ROC(   actual   = actual,   response = response )  # 5) plot by species plot(roc)   # 5.1) summarise summary(roc) #> Reciever Operator Characteristics  #> ================================================================================ #> AUC #>  - Others: 0.116 #>  - Virginica: 0.887  # 6) provide custom # threholds roc <- ROC(   actual     = actual,   response   = response,   thresholds = seq(0, 1, length.out = 4) )   # 5) plot by species plot(roc)"},{"path":"https://serkor1.github.io/SLmetrics/reference/accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{accuracy}\\) — accuracy.factor","title":"Compute the \\(\\text{accuracy}\\) — accuracy.factor","text":"accuracy()-function computes accuracy two vectors predicted observed factor() values.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{accuracy}\\) — accuracy.factor","text":"","code":"# S3 method for class 'factor' accuracy(actual, predicted, na.rm = FALSE, ...)  # S3 method for class 'cmatrix' accuracy(x, ...)  accuracy(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{accuracy}\\) — accuracy.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{accuracy}\\) — accuracy.factor","text":"<numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/accuracy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{accuracy}\\) — accuracy.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/accuracy.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{accuracy}\\) — accuracy.factor","text":"metric calculated follows, $$   \\frac{\\#TP + \\#TN}{\\#TP + \\#TN + \\#FP + \\#FN} $$ \\(\\#TP\\), \\(\\#TN\\), \\(\\#FP\\), \\(\\#FN\\) number true positives, true negatives, false positives, false negatives, respectively.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/accuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{accuracy}\\) — accuracy.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate the # model accuracy(   actual    = actual,   predicted = predicted ) #> [1] 0.8066667"},{"path":"https://serkor1.github.io/SLmetrics/reference/baccuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{balanced}\\) \\(\\text{accuracy}\\) — baccuracy.factor","title":"Compute the \\(\\text{balanced}\\) \\(\\text{accuracy}\\) — baccuracy.factor","text":"baccuracy()-function computes balanced accuracy two vectors predicted observed factor() values.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/baccuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{balanced}\\) \\(\\text{accuracy}\\) — baccuracy.factor","text":"","code":"# S3 method for class 'factor' baccuracy(actual, predicted, adjust = FALSE, ...)  # S3 method for class 'cmatrix' baccuracy(x, adjust = FALSE, ...)  baccuracy(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/baccuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{balanced}\\) \\(\\text{accuracy}\\) — baccuracy.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. adjust logical value. FALSE default. TRUE metric adjusted random change \\(\\frac{1}{k}\\) ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/baccuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{balanced}\\) \\(\\text{accuracy}\\) — baccuracy.factor","text":"numeric-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/baccuracy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{balanced}\\) \\(\\text{accuracy}\\) — baccuracy.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/baccuracy.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{balanced}\\) \\(\\text{accuracy}\\) — baccuracy.factor","text":"metric calculated follows, $$   \\frac{\\text{sensitivity} + \\text{specificty}}{2} $$ See sensitivity()- /specificity()-function details.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/baccuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{balanced}\\) \\(\\text{accuracy}\\) — baccuracy.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate the # model # # 4.1) no adjustment baccuracy(   actual    = actual,   predicted = predicted ) #> [1] 0.78  # 4.2) with adjustment baccuracy(   actual    = actual,   predicted = predicted,   adjust    = TRUE ) #> [1] 0.56"},{"path":"https://serkor1.github.io/SLmetrics/reference/ccc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{concordance}\\) \\(\\text{correlation}\\) \\(\\text{coefficient}\\) — ccc.numeric","title":"Compute the \\(\\text{concordance}\\) \\(\\text{correlation}\\) \\(\\text{coefficient}\\) — ccc.numeric","text":"ccc()-function computes simple weighted concordance correlation coefficient two vectors predicted observed <numeric> values. w NULL, function returns weighted concordance correlation coefficient. correction TRUE \\(\\sigma^2\\) adjusted \\(\\frac{1-n}{n}\\) intermediate steps.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/ccc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{concordance}\\) \\(\\text{correlation}\\) \\(\\text{coefficient}\\) — ccc.numeric","text":"","code":"# S3 method for class 'numeric' ccc(actual, predicted, correction = FALSE, w = NULL, na.rm = FALSE, ...)  ccc(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/ccc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{concordance}\\) \\(\\text{correlation}\\) \\(\\text{coefficient}\\) — ccc.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. correction <logical> vector length 1. FALSE default. TRUE variance covariance adjusted \\(\\frac{1-n}{n}\\) w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/ccc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{concordance}\\) \\(\\text{correlation}\\) \\(\\text{coefficient}\\) — ccc.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/ccc.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{concordance}\\) \\(\\text{correlation}\\) \\(\\text{coefficient}\\) — ccc.numeric","text":"metric calculated follows, $$   \\rho_c = \\frac{2 \\rho \\sigma_x \\sigma_y}{\\sigma_x^2 + \\sigma_y^2 + (\\mu_x - \\mu_y)^2} $$ \\(\\rho\\) \\(\\text{pearson correlation coefficient}\\), \\(\\sigma\\) \\(\\text{standard deviation}\\) \\(\\mu\\) simple mean actual predicted. w NULL, calculations based weighted measures.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/ccc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{concordance}\\) \\(\\text{correlation}\\) \\(\\text{coefficient}\\) — ccc.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate # the metric ccc(   actual     = actual,   predicted  = predicted,   correction = TRUE ) #> [1] 0.9299181  # 3) calculate # the weighted metric # using arbtrary weights w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  ccc(   actual     = actual,   predicted  = predicted,   w          = w,   correction = TRUE ) #> [1] 0.9288408"},{"path":"https://serkor1.github.io/SLmetrics/reference/ckappa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cohen's \\(\\kappa\\)-statistic — ckappa.factor","title":"Compute Cohen's \\(\\kappa\\)-statistic — ckappa.factor","text":"kappa()-function computes Cohen's \\(\\kappa\\), statistic measures inter-rater agreement categorical items two vectors predicted observed factor() values. \\(\\beta \\neq 0\\) -diagonals confusion matrix penalized factor \\((y_{+} - y_{,-})^\\beta\\). See details.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/ckappa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cohen's \\(\\kappa\\)-statistic — ckappa.factor","text":"","code":"# S3 method for class 'factor' ckappa(actual, predicted, beta = 1, ...)  # S3 method for class 'cmatrix' ckappa(x, beta = 1, ...)  ckappa(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/ckappa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cohen's \\(\\kappa\\)-statistic — ckappa.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. beta <numeric> value length 1. 0 default. set value different zero, -diagonal confusion matrix penalized. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/ckappa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cohen's \\(\\kappa\\)-statistic — ckappa.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/ckappa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Cohen's \\(\\kappa\\)-statistic — ckappa.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/ckappa.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute Cohen's \\(\\kappa\\)-statistic — ckappa.factor","text":"NA","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/ckappa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Cohen's \\(\\kappa\\)-statistic — ckappa.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) ckappa statistic # with namespace qualified # call to avoid conflict # with base R SLmetrics::ckappa(   actual    = iris$Species,   predicted = predicted ) #> [1] -0.2808023"},{"path":"https://serkor1.github.io/SLmetrics/reference/cmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Confusion Matrix — cmatrix","title":"Confusion Matrix — cmatrix","text":"cmatrix()-function uses cross-classifying factors build confusion matrix counts combination factor levels. row matrix represents actual factor levels, column represents predicted factor levels.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/cmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confusion Matrix — cmatrix","text":"","code":"cmatrix(   actual,   predicted )"},{"path":"https://serkor1.github.io/SLmetrics/reference/cmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confusion Matrix — cmatrix","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/cmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confusion Matrix — cmatrix","text":"named \\(k\\) x \\(k\\) <matrix> class","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/cmatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confusion Matrix — cmatrix","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/cmatrix.html","id":"dimensions","dir":"Reference","previous_headings":"","what":"Dimensions","title":"Confusion Matrix — cmatrix","text":"robust defensive measure misspecififying confusion matrix. arguments correctly specified, resulting confusion matrix form:","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/cmatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confusion Matrix — cmatrix","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) confusion matrix confusion_matrix <- cmatrix(   actual    = actual,   predicted = predicted )  # 4.1) summarise matrix summary(   confusion_matrix ) #> Confusion Matrix (2 x 2)  #> ================================================================================ #>           Virginica Others #> Virginica        35     15 #> Others           14     86 #> ================================================================================ #> Overall Statistics (micro average) #>  - Accuracy:          0.81 #>  - Balanced Accuracy: 0.78 #>  - Sensitivity:       0.81 #>  - Specificity:       0.81 #>  - Precision:         0.81  # 4.2) plot confusion # matrix plot(   confusion_matrix )"},{"path":"https://serkor1.github.io/SLmetrics/reference/dor.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{diagnostic}\\) \\(\\text{odds}\\) \\(\\text{ratio}\\) — dor.factor","title":"Compute the \\(\\text{diagnostic}\\) \\(\\text{odds}\\) \\(\\text{ratio}\\) — dor.factor","text":"dor()-function computes Diagnostic Odds Ratio (DOR), single indicator test performance, two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-average DOR across classes \\(k\\). default, returns class-wise DOR.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/dor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{diagnostic}\\) \\(\\text{odds}\\) \\(\\text{ratio}\\) — dor.factor","text":"","code":"# S3 method for class 'factor' dor(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' dor(x, micro = NULL, na.rm = TRUE, ...)  dor(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/dor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{diagnostic}\\) \\(\\text{odds}\\) \\(\\text{ratio}\\) — dor.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/dor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{diagnostic}\\) \\(\\text{odds}\\) \\(\\text{ratio}\\) — dor.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/dor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{diagnostic}\\) \\(\\text{odds}\\) \\(\\text{ratio}\\) — dor.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/dor.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{diagnostic}\\) \\(\\text{odds}\\) \\(\\text{ratio}\\) — dor.factor","text":"metric calculated class \\(k\\) follows, $$   \\text{DOR}_k = \\frac{\\text{PLR}_k}{\\text{NLR}_k} $$ \\(\\text{PLR}_k\\) \\(\\text{NLR}_k\\) positive negative likelihood ratio class \\(k\\), respectively. See plr() nlr() details. aggregate = TRUE, micro-average calculated , $$   \\overline{\\text{DOR}} = \\frac{\\overline{\\text{PLR}_k}}{\\overline{\\text{NLR}_k}} $$ \\(\\overline{\\text{PLR}}\\) \\(\\overline{\\text{NLR}}\\) micro-averaged positive negative likelihood ratio, respectively.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/dor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{diagnostic}\\) \\(\\text{odds}\\) \\(\\text{ratio}\\) — dor.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) diagnostic odds # ratio dor(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #>  14.33333  14.33333"},{"path":"https://serkor1.github.io/SLmetrics/reference/fbeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(F_{\\beta}\\)-score — fbeta.factor","title":"Compute the \\(F_{\\beta}\\)-score — fbeta.factor","text":"fbeta()-function computes \\(F_\\beta\\) score, weighted harmonic mean precision() recall(), two vectors predicted observed factor() values. parameter \\(\\beta\\) determines weight precision recall combined score. aggregate = TRUE, function returns micro-average \\(F_\\beta\\) score across classes \\(k\\). default, returns class-wise \\(F_\\beta\\) score.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fbeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(F_{\\beta}\\)-score — fbeta.factor","text":"","code":"# S3 method for class 'factor' fbeta(actual, predicted, beta = 1, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' fbeta(x, beta = 1, micro = NULL, na.rm = TRUE, ...)  fbeta(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/fbeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(F_{\\beta}\\)-score — fbeta.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. beta <numeric> vector length 1. 1 default, see calculations. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fbeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(F_{\\beta}\\)-score — fbeta.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fbeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(F_{\\beta}\\)-score — fbeta.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/fbeta.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(F_{\\beta}\\)-score — fbeta.factor","text":"metric calculated class \\(k\\) follows, $$   (1 + \\beta^2) \\frac{\\text{Precision}_k \\cdot \\text{Recall}_k}{(\\beta^2 \\cdot \\text{Precision}_k) + \\text{Recall}_k} $$ precision \\(\\frac{\\#TP_k}{\\#TP_k + \\#FP_k}\\) recall (sensitivity) \\(\\frac{\\#TP_k}{\\#TP_k + \\#FN_k}\\), \\(\\beta\\) determines weight precision relative recall. aggregate = TRUE, micro-average \\(F_\\beta\\) score calculated, $$   (1 + \\beta^2) \\frac{\\sum_{k=1}^K \\text{Precision}_k \\cdot \\sum_{k=1}^K \\text{Recall}_k}{(\\beta^2 \\cdot \\sum_{k=1}^K \\text{Precision}_k) + \\sum_{k=1}^K \\text{Recall}_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/fbeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(F_{\\beta}\\)-score — fbeta.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )   # 4) class-wise f1 # score fbeta(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #> 0.7070707 0.8557214   # 4.1) micro-averaged F1 score fbeta(   actual    = actual,   predicted = predicted,   micro = TRUE ) #> [1] 0.8066667  # 4.2 macro-averaged F1 score fbeta(   actual    = actual,   predicted = predicted,   micro     = FALSE ) #> [1] 0.7813961"},{"path":"https://serkor1.github.io/SLmetrics/reference/fdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{false}\\) \\(\\text{discovery}\\) \\(\\text{rate}\\) — fdr.factor","title":"Compute the \\(\\text{false}\\) \\(\\text{discovery}\\) \\(\\text{rate}\\) — fdr.factor","text":"fdr()-function computes false discovery rate (FDR), proportion false positives among predicted positives, two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-average FDR across classes \\(k\\). default, returns class-wise FDR.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{false}\\) \\(\\text{discovery}\\) \\(\\text{rate}\\) — fdr.factor","text":"","code":"# S3 method for class 'factor' fdr(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' fdr(x, micro = NULL, na.rm = TRUE, ...)  fdr(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/fdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{false}\\) \\(\\text{discovery}\\) \\(\\text{rate}\\) — fdr.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{false}\\) \\(\\text{discovery}\\) \\(\\text{rate}\\) — fdr.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fdr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{false}\\) \\(\\text{discovery}\\) \\(\\text{rate}\\) — fdr.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/fdr.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{false}\\) \\(\\text{discovery}\\) \\(\\text{rate}\\) — fdr.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\#FP_k}{\\#TP_k+\\#FP_k} $$ \\(\\#TP_k\\) \\(\\#FP_k\\) number true psotives false positives, respectively, class \\(k\\). aggregate = TRUE micro-average calculated, $$  \\frac{\\sum_{k=1}^k \\#FP_k}{\\sum_{k=1}^k \\#TP_k + \\sum_{k=1}^k \\#FP_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/fdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{false}\\) \\(\\text{discovery}\\) \\(\\text{rate}\\) — fdr.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )   # 4) evaluate performance # 4.1) by class fdr(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #> 0.2857143 0.1485149   # 4.2) macro-average fdr(   actual    = actual,   predicted = predicted,   micro     = FALSE ) #> [1] 0.2171146  # 4.3) micro-average fdr(   actual    = actual,   predicted = predicted,   micro     = TRUE ) #> [1] 0.1933333"},{"path":"https://serkor1.github.io/SLmetrics/reference/fer.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{false}\\) \\(\\text{omission}\\) \\(\\text{rate}\\) — fer.factor","title":"Compute the \\(\\text{false}\\) \\(\\text{omission}\\) \\(\\text{rate}\\) — fer.factor","text":"fer()-function computes false omission rate (), proportion false negatives among predicted negatives, two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-average across classes \\(k\\). default, returns class-wise .","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{false}\\) \\(\\text{omission}\\) \\(\\text{rate}\\) — fer.factor","text":"","code":"# S3 method for class 'factor' fer(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' fer(x, micro = NULL, na.rm = TRUE, ...)  fer(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/fer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{false}\\) \\(\\text{omission}\\) \\(\\text{rate}\\) — fer.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{false}\\) \\(\\text{omission}\\) \\(\\text{rate}\\) — fer.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{false}\\) \\(\\text{omission}\\) \\(\\text{rate}\\) — fer.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/fer.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{false}\\) \\(\\text{omission}\\) \\(\\text{rate}\\) — fer.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\#FN_k}{\\#FN_k + \\#TN_k} $$ \\(\\#FN_k\\) \\(\\#TN_k\\) number false negatives true negatives, respectively, class \\(k\\). aggregate = TRUE, micro-average calculated, $$   \\frac{\\sum_{k=1}^k \\#FN_k}{\\sum_{k=1}^k \\#FN_k + \\sum_{k=1}^k \\#TN_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/fer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{false}\\) \\(\\text{omission}\\) \\(\\text{rate}\\) — fer.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate performance # 4.1) by class fer(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #> 0.1485149 0.2857143   # 4.2) macro-average fer(   actual    = actual,   predicted = predicted,   micro     = FALSE ) #> [1] 0.2171146  # 4.3) micro-average fer(   actual    = actual,   predicted = predicted,   micro     = TRUE ) #> [1] 0.1933333"},{"path":"https://serkor1.github.io/SLmetrics/reference/fmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{fowlkes}\\)-\\(\\text{fallows}\\) \\(\\text{index}\\) — fmi.factor","title":"Compute the \\(\\text{fowlkes}\\)-\\(\\text{fallows}\\) \\(\\text{index}\\) — fmi.factor","text":"fmi()-function computes Fowlkes-Mallows Index (FMI), measure similarity two sets clusterings, two vectors predicted observed factor() values.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{fowlkes}\\)-\\(\\text{fallows}\\) \\(\\text{index}\\) — fmi.factor","text":"","code":"# S3 method for class 'factor' fmi(actual, predicted, ...)  # S3 method for class 'cmatrix' fmi(x, ...)  fmi(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/fmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{fowlkes}\\)-\\(\\text{fallows}\\) \\(\\text{index}\\) — fmi.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{fowlkes}\\)-\\(\\text{fallows}\\) \\(\\text{index}\\) — fmi.factor","text":"<numeric> vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fmi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{fowlkes}\\)-\\(\\text{fallows}\\) \\(\\text{index}\\) — fmi.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/fmi.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{fowlkes}\\)-\\(\\text{fallows}\\) \\(\\text{index}\\) — fmi.factor","text":"metric calculated class \\(k\\) follows, $$   \\sqrt{\\frac{\\#TP_k}{\\#TP_k + \\#FP_k} \\times \\frac{\\#TP_k}{\\#TP_k + \\#FN_k}} $$ \\(\\#TP_k\\), \\(\\#FP_k\\), \\(\\#FN_k\\) represent number true positives, false positives, false negatives class \\(k\\), respectively.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/fmi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{fowlkes}\\)-\\(\\text{fallows}\\) \\(\\text{index}\\) — fmi.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate performance fmi(   actual    = actual,   predicted = predicted ) #> [1] 0.717045"},{"path":"https://serkor1.github.io/SLmetrics/reference/fpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{false}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — fpr.factor","title":"Compute the \\(\\text{false}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — fpr.factor","text":"fpr()-function computes False Positive Rate (FPR), also known fall-(fallout()), two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-average FPR across classes \\(k\\). default, returns class-wise FPR.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{false}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — fpr.factor","text":"","code":"# S3 method for class 'factor' fpr(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' fpr(x, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'factor' fallout(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' fallout(x, micro = NULL, na.rm = TRUE, ...)  fpr(...)  fallout(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/fpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{false}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — fpr.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{false}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — fpr.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/fpr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{false}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — fpr.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/fpr.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{false}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — fpr.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\#FP_k}{\\#FP_k + \\#TN_k} $$ \\(\\#FP_k\\) \\(\\#TN_k\\) represent number false positives true negatives, respectively, class \\(k\\). aggregate = TRUE, micro-average calculated across classes, $$   \\frac{\\sum_{k=1}^k \\#FP_k}{\\sum_{k=1}^k \\#FP_k + \\sum_{k=1}^k \\#TN_k} $$ FPR complement specificity, \\(\\text{FPR} = 1 - \\text{Specificity}\\).","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/fpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{false}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — fpr.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate performance # 4.1) by class fpr(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #>      0.14      0.30   # 4.2) macro-average fpr(   actual    = actual,   predicted = predicted,   micro     = FALSE ) #> [1] 0.22  # 4.3) micro-average fpr(   actual    = actual,   predicted = predicted,   micro     = TRUE ) #> [1] 0.1933333"},{"path":"https://serkor1.github.io/SLmetrics/reference/huberloss.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{huber}\\) \\(\\text{loss}\\) — huberloss.numeric","title":"Compute the \\(\\text{huber}\\) \\(\\text{loss}\\) — huberloss.numeric","text":"huberloss()-function computes simple weighted huber loss predicted observed <numeric> vectors.w NULL function returns weighted averages.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/huberloss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{huber}\\) \\(\\text{loss}\\) — huberloss.numeric","text":"","code":"# S3 method for class 'numeric' huberloss(actual, predicted, delta = 1, w = NULL, na.rm = FALSE, ...)  huberloss(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/huberloss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{huber}\\) \\(\\text{loss}\\) — huberloss.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. delta <numeric>-vector length 1. 1 default. threshold value switch functions (see calculation). w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/huberloss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{huber}\\) \\(\\text{loss}\\) — huberloss.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/huberloss.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{huber}\\) \\(\\text{loss}\\) — huberloss.numeric","text":"metric calculated follows, $$  \\frac{1}{2} (y - \\upsilon)^2 ~~ |y - \\upsilon| \\leq \\delta $$ $$   \\delta |y-\\upsilon|-\\frac{1}{2} \\delta^2 ~~ \\text{otherwise} $$ \\(y\\) \\(\\upsilon\\) actual predicted values respectively. w NULL, values aggregated using weights.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/huberloss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{huber}\\) \\(\\text{loss}\\) — huberloss.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate the metric # with delta 0.5 huberloss(   actual = actual,   predicted = predicted,   delta = 0.5 ) #> [1] 0.7503286  # 3) caclulate weighted # metric using arbitrary weights w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  huberloss(   actual = actual,   predicted = predicted,   delta = 0.5,   w     = w ) #> [1] 0.748734"},{"path":"https://serkor1.github.io/SLmetrics/reference/jaccard.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{Jaccard}\\) \\(\\text{index}\\) — jaccard.factor","title":"Compute the \\(\\text{Jaccard}\\) \\(\\text{index}\\) — jaccard.factor","text":"jaccard()-function computes Jaccard Index, also known Intersection Union, two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-average Jaccard Index across classes \\(k\\). default, returns class-wise Jaccard Index.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/jaccard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{Jaccard}\\) \\(\\text{index}\\) — jaccard.factor","text":"","code":"# S3 method for class 'factor' jaccard(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' jaccard(x, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'factor' csi(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' csi(x, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'factor' tscore(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' tscore(x, micro = NULL, na.rm = TRUE, ...)  jaccard(...)  csi(...)  tscore(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/jaccard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{Jaccard}\\) \\(\\text{index}\\) — jaccard.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/jaccard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{Jaccard}\\) \\(\\text{index}\\) — jaccard.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/jaccard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{Jaccard}\\) \\(\\text{index}\\) — jaccard.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/jaccard.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{Jaccard}\\) \\(\\text{index}\\) — jaccard.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\#TP_k}{\\#TP_k + \\#FP_k + \\#FN_k} $$ \\(\\#TP_k\\), \\(\\#FP_k\\), \\(\\#FN_k\\) represent number true positives, false positives, false negatives class \\(k\\), respectively. aggregate = TRUE, micro-average calculated , $$   \\frac{\\sum_{= 1}^{k} TP_i}{\\sum_{= 1}^{k} TP_i + \\sum_{= 1}^{k} FP_k + \\sum_{= 1}^{k} FN_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/jaccard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{Jaccard}\\) \\(\\text{index}\\) — jaccard.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate performance # 4.1) by class jaccard(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #> 0.5468750 0.7478261   # 4.2) macro-average jaccard(   actual    = actual,   predicted = predicted,   micro     = FALSE ) #> [1] 0.6473505  # 4.3) micro-average jaccard(   actual    = actual,   predicted = predicted,   micro     = TRUE ) #> [1] 0.6759777"},{"path":"https://serkor1.github.io/SLmetrics/reference/mae.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — mae.numeric","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — mae.numeric","text":"mae()-function computes simple weighted mean absolute error observed predicted <numeric> vectors. w NULL function returns weighted mean absolute error.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — mae.numeric","text":"","code":"# S3 method for class 'numeric' mae(actual, predicted, w = NULL, na.rm = FALSE, ...)  mae(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/mae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — mae.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — mae.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mae.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — mae.numeric","text":"metric calulated follows, $$   \\frac{\\sum_i^n |y_i - \\upsilon_i|}{n} $$ \\(w\\) NULL function returns weigthed version.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/mae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — mae.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate # the metric mae(   actual     = actual,   predicted  = predicted ) #> [1] 1.72274  # 3) calculate # the weighted metric # using arbtrary weights w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  mae(   actual     = actual,   predicted  = predicted,   w          = w ) #> [1] 1.73179"},{"path":"https://serkor1.github.io/SLmetrics/reference/mape.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mape.numeric","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mape.numeric","text":"mape()-function computes simple weighted mean absolute percentage error observed predicted <numeric> vectors. w NULL function returns weighted mean absolute error.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mape.numeric","text":"","code":"# S3 method for class 'numeric' mape(actual, predicted, w = NULL, na.rm = FALSE, ...)  mape(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/mape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mape.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mape.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mape.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mape.numeric","text":"metric calculated , $$   \\frac{1}{n} \\sum_i^n \\frac{|y_i - \\upsilon_i|}{|y_i|} $$ \\(\\text{w}\\) NULL, weighted version calculated.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/mape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mape.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate # the metric mape(   actual     = actual,   predicted  = predicted ) #> [1] 0.08776196  # 3) calculate # the weighted metric # using arbtrary weights w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  mape(   actual     = actual,   predicted  = predicted,   w          = w ) #> [1] 0.08899464"},{"path":"https://serkor1.github.io/SLmetrics/reference/mcc.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{Matthews}\\) \\(\\text{Correlation}\\) \\(\\text{Coefficient}\\) — mcc.factor","title":"Compute the \\(\\text{Matthews}\\) \\(\\text{Correlation}\\) \\(\\text{Coefficient}\\) — mcc.factor","text":"mcc()-function computes Matthews Correlation Coefficient (MCC), also known \\(\\phi\\)-coefficient, two vectors predicted observed factor() values.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mcc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{Matthews}\\) \\(\\text{Correlation}\\) \\(\\text{Coefficient}\\) — mcc.factor","text":"","code":"# S3 method for class 'factor' mcc(actual, predicted, ...)  # S3 method for class 'cmatrix' mcc(x, ...)  # S3 method for class 'factor' phi(actual, predicted, ...)  # S3 method for class 'cmatrix' phi(x, ...)  mcc(...)  phi(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/mcc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{Matthews}\\) \\(\\text{Correlation}\\) \\(\\text{Coefficient}\\) — mcc.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mcc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{Matthews}\\) \\(\\text{Correlation}\\) \\(\\text{Coefficient}\\) — mcc.factor","text":"named <numeric> vector length k","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mcc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{Matthews}\\) \\(\\text{Correlation}\\) \\(\\text{Coefficient}\\) — mcc.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/mcc.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{Matthews}\\) \\(\\text{Correlation}\\) \\(\\text{Coefficient}\\) — mcc.factor","text":"metric calculated follows, $$   \\frac{\\#TP \\times \\#TN - \\#FP \\times \\#FN}{\\sqrt{(\\#TP + \\#FP)(\\#TP + \\#FN)(\\#TN + \\#FP)(\\#TN + \\#FN)}} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/mcc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{Matthews}\\) \\(\\text{Correlation}\\) \\(\\text{Coefficient}\\) — mcc.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate performance # 4.1) by class mcc(   actual    = actual,   predicted = predicted ) #> [1] 0.562878"},{"path":"https://serkor1.github.io/SLmetrics/reference/mpe.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{mean}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mpe.numeric","title":"Compute the \\(\\text{mean}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mpe.numeric","text":"mpe()-function computes mean percentage error observed predicted <numeric> vectors. w NULL, function returns weighted mean percentage error.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mpe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{mean}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mpe.numeric","text":"","code":"# S3 method for class 'numeric' mpe(actual, predicted, w = NULL, na.rm = FALSE, ...)  mpe(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/mpe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{mean}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mpe.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mpe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{mean}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mpe.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mpe.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{mean}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mpe.numeric","text":"metric calculated , $$   \\frac{1}{n} \\sum_i^n \\frac{y_i - \\upsilon_i}{y_i} $$ \\(y_i\\) \\(\\upsilon_i\\) actual predicted values respectively. \\(\\text{w}\\) NULL, weighted version calculated.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/mpe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{mean}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — mpe.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate # the metric mpe(   actual     = actual,   predicted  = predicted ) #> [1] -0.008569118  # 3) calculate # the weighted metric # using arbtrary weights w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  mpe(   actual     = actual,   predicted  = predicted,   w          = w ) #> [1] -0.01035617"},{"path":"https://serkor1.github.io/SLmetrics/reference/mse.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — mse.numeric","title":"Compute the \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — mse.numeric","text":"mse()-function computes simple weighted mean squared error observed predicted <numeric> vectors. w NULL, function returns weighted mean squared error.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — mse.numeric","text":"","code":"# S3 method for class 'numeric' mse(actual, predicted, w = NULL, na.rm = FALSE, ...)  mse(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/mse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — mse.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — mse.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/mse.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — mse.numeric","text":"metric calculated , $$   \\frac{1}{n} \\sum_i^n (y_i - \\upsilon_i)^2 $$ \\(y_i\\) \\(\\upsilon_i\\) actual predicted values respectively. \\(\\text{w}\\) NULL, weighted version calculated.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/mse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — mse.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate # the metric mse(   actual     = actual,   predicted  = predicted ) #> [1] 4.609201  # 3) calculate # the weighted metric # using arbtrary weights w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  mse(   actual     = actual,   predicted  = predicted,   w          = w ) #> [1] 4.286971"},{"path":"https://serkor1.github.io/SLmetrics/reference/nlr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{negative}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — nlr.factor","title":"Compute the \\(\\text{negative}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — nlr.factor","text":"nlr()-function computes negative likelihood ratio, also known likelihood ratio negative results, two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-average NLR across classes \\(k\\). default, returns class-wise NLR.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/nlr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{negative}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — nlr.factor","text":"","code":"# S3 method for class 'factor' nlr(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' nlr(x, micro = NULL, na.rm = TRUE, ...)  nlr(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/nlr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{negative}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — nlr.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/nlr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{negative}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — nlr.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/nlr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{negative}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — nlr.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/nlr.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{negative}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — nlr.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{1 - \\text{Sensitivity}_k}{\\text{Specificity}_k} $$ sensitivity (true positive rate) calculated \\(\\frac{\\#TP_k}{\\#TP_k + \\#FN_k}\\) specificity (true negative rate) calculated \\(\\frac{\\#TN_k}{\\#TN_k + \\#FP_k}\\). aggregate = TRUE, micro-average calculated, $$   \\frac{\\sum_{k=1}^k (1 - \\text{Sensitivity}_k)}{\\sum_{k=1}^k \\text{Specificity}_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/nlr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{negative}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — nlr.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) negative likeliood # ratio nlr(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #> 0.3488372 0.2000000   # 4.1) micro averaged # nlr nlr(   actual    = actual,   predicted = predicted,   micro     = TRUE  ) #> [1] 0.2396694  # macro averaged # nlr nlr(   actual    = actual,   predicted = predicted,   micro     = FALSE  ) #> [1] 0.2744186"},{"path":"https://serkor1.github.io/SLmetrics/reference/npv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{negative}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — npv.factor","title":"Compute the \\(\\text{negative}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — npv.factor","text":"npv()-function computes negative predictive value, also known True Negative Predictive Value, two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-average NPV across classes \\(k\\). default, returns class-wise NPV.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/npv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{negative}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — npv.factor","text":"","code":"# S3 method for class 'factor' npv(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' npv(x, micro = NULL, na.rm = TRUE, ...)  npv(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/npv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{negative}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — npv.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/npv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{negative}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — npv.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/npv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{negative}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — npv.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/npv.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{negative}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — npv.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\#TN_k}{\\#TN_k + \\#FN_k} $$ \\(\\#TN_k\\) \\(\\#FN_k\\) number true negatives false negatives, respectively, class \\(k\\). aggregate = TRUE, micro-average calculated, $$   \\frac{\\sum_{k=1}^k \\#TN_k}{\\sum_{k=1}^k \\#TN_k + \\sum_{k=1}^k \\#FN_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/npv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{negative}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — npv.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate performance # 4.1) by class npv(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #> 0.8514851 0.7142857   # 4.2) macro-average npv(   actual    = actual,   predicted = predicted,   micro     = FALSE ) #> [1] 0.7828854  # 4.3) micro-average npv(   actual    = actual,   predicted = predicted,   micro     = TRUE ) #> [1] 0.8066667"},{"path":"https://serkor1.github.io/SLmetrics/reference/pinball.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{pinball}\\) \\(\\text{loss}\\) — pinball.numeric","title":"Compute the \\(\\text{pinball}\\) \\(\\text{loss}\\) — pinball.numeric","text":"pinball()-function computes pinball loss observed predicted <numeric> vectors. w NULL, function returns weighted pinball loss.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/pinball.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{pinball}\\) \\(\\text{loss}\\) — pinball.numeric","text":"","code":"# S3 method for class 'numeric' pinball(   actual,   predicted,   alpha = 0.5,   deviance = FALSE,   w = NULL,   na.rm = FALSE,   ... )  pinball(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/pinball.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{pinball}\\) \\(\\text{loss}\\) — pinball.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. alpha <numeric>-value length 1. slope pinball loss function. \\(0.5\\) default. deviance <logical>-value length 1. FALSE default. TRUE function returns \\(D^2\\) loss. w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/pinball.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{pinball}\\) \\(\\text{loss}\\) — pinball.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/pinball.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{pinball}\\) \\(\\text{loss}\\) — pinball.numeric","text":"pinball loss measures accuracy quantile predictions penalizing overestimates underestimates asymmetrically based specified quantile (alpha). Weighted Pinball Loss: $$\\text{PinballLoss}_{\\text{weighted}} = \\frac{\\sum_{=1}^{n} w_i \\cdot \\left[ \\alpha \\cdot \\max(0, y_i - \\hat{y}_i) - (1 - \\alpha) \\cdot \\max(0, \\hat{y}_i - y_i) \\right]}{\\sum_{=1}^{n} w_i}$$ : \\(y_i\\) actual value, \\(\\hat{y}_i\\) predicted value, \\(w_i\\) weight observation \\(\\), \\(\\alpha\\) quantile level. Unweighted Pinball Loss: $$\\text{PinballLoss}_{\\text{unweighted}} = \\frac{1}{n} \\sum_{=1}^{n} \\left[ \\alpha \\cdot \\max(0, y_i - \\hat{y}_i) - (1 - \\alpha) \\cdot \\max(0, \\hat{y}_i - y_i) \\right]$$ : \\(y_i\\) actual value, \\(\\hat{y}_i\\) predicted value, \\(\\alpha\\) quantile level.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/pinball.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{pinball}\\) \\(\\text{loss}\\) — pinball.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate # the metric pinball(   actual     = actual,   predicted  = predicted ) #> [1] 0.8613701  # 3) calculate # the weighted metric # using arbtrary weights w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  pinball(   actual     = actual,   predicted  = predicted,   w          = w ) #> [1] 0.8421418"},{"path":"https://serkor1.github.io/SLmetrics/reference/plr.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{positive}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — plr.factor","title":"Compute the \\(\\text{positive}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — plr.factor","text":"plr()-function computes positive likelihood ratio, also known likelihood ratio positive results, two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-average PLR across classes \\(k\\). default, returns class-wise PLR.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/plr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{positive}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — plr.factor","text":"","code":"# S3 method for class 'factor' plr(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' plr(x, micro = NULL, na.rm = TRUE, ...)  plr(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/plr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{positive}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — plr.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/plr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{positive}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — plr.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/plr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{positive}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — plr.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/plr.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{positive}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — plr.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\text{Sensitivity}_k}{1 - \\text{Specificity}_k} $$ sensitivity (true positive rate) calculated \\(\\frac{\\#TP_k}{\\#TP_k + \\#FN_k}\\) specificity (true negative rate) calculated \\(\\frac{\\#TN_k}{\\#TN_k + \\#FP_k}\\). aggregate = TRUE, micro-average calculated, $$   \\frac{\\sum_{k=1}^k \\text{Sensitivity}_k}{1 - \\sum_{k=1}^k \\text{Specificity}_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/plr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{positive}\\) \\(\\text{likelihood}\\) \\(\\text{ratio}\\) — plr.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) positive likelihood # ratio plr(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #>  5.000000  2.866667   # 4.1) micro averaged # plr plr(   actual    = actual,   predicted = predicted,   micro     = TRUE  ) #> [1] 4.172414  # macro averaged # plr plr(   actual    = actual,   predicted = predicted,   micro     = FALSE  ) #> [1] 3.933333"},{"path":"https://serkor1.github.io/SLmetrics/reference/prROC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — prROC.factor","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — prROC.factor","text":"prROC()-function computes precision() recall() thresholds provided \\(response\\)- \\(thresholds\\)-vector. function constructs data.frame() grouped \\(k\\)-classes class treated binary classification problem.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/prROC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — prROC.factor","text":"","code":"# S3 method for class 'factor' prROC(actual, response, micro = NULL, thresholds = NULL, na.rm = TRUE, ...)  prROC(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/prROC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — prROC.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. response <numeric>-vector length \\(n\\). estimated response probabilities. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. thresholds optional <numeric>-vector non-zero length. NULL default. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/prROC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — prROC.factor","text":"data.frame following form, thresholds <numeric> Thresholds used determine recall() precision() level <character> level actual <factor> label <character> levels actual <factor> recall <numeric> recall precision <numeric> precision","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/prROC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — prROC.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/prROC.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — prROC.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\#TN_k}{\\#TN_k+\\#FP_k} $$ \\(\\#TN_k\\) \\(\\#FP_k\\) number true negatives false positives, respectively, class \\(k\\). aggregate = TRUE micro-average calculated, $$   \\frac{\\sum_{k=1}^k \\#TN_k}{\\sum_{k=1}^k \\#TN_k + \\sum_{k=1}^k \\#FP_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/prROC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{reciever}\\) \\(\\text{operator}\\) \\(\\text{characteristics}\\) — prROC.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes response <- predict(model, type = \"response\")  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )    # 4) generate reciever # operator characteristics roc <- prROC(   actual   = actual,   response = response )   # 5) plot by species plot(roc)   # 5.1) summarise summary(roc) #> Reciever Operator Characteristics  #> ================================================================================ #> AUC #>  - Others: 0.473 #>  - Virginica: 0.764  # 6) provide custom # threholds roc <- prROC(   actual     = actual,   response   = response,   thresholds = seq(0, 1, length.out = 4) )   # 5) plot by species plot(roc)"},{"path":"https://serkor1.github.io/SLmetrics/reference/precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{precision}\\) or \\(\\text{positive}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — precision.factor","title":"Compute the \\(\\text{precision}\\) or \\(\\text{positive}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — precision.factor","text":"precision()-function computes precision, also known positive predictive value (PPV), two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-average precision across classes \\(k\\). default, returns class-wise precision.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{precision}\\) or \\(\\text{positive}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — precision.factor","text":"","code":"# S3 method for class 'factor' precision(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' precision(x, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'factor' ppv(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' ppv(x, micro = NULL, na.rm = TRUE, ...)  precision(...)  ppv(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{precision}\\) or \\(\\text{positive}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — precision.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{precision}\\) or \\(\\text{positive}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — precision.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/precision.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{precision}\\) or \\(\\text{positive}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — precision.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/precision.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{precision}\\) or \\(\\text{positive}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — precision.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\#TP_k}{\\#TP_k + \\#FP_k} $$ \\(\\#TP_k\\) \\(\\#FP_k\\) number true positives false positives, respectively, class \\(k\\). aggregate = TRUE, micro-average calculated, $$   \\frac{\\sum_{k=1}^k \\#TP_k}{\\sum_{k=1}^k \\#TP_k + \\sum_{k=1}^k \\#FP_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/precision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{precision}\\) or \\(\\text{positive}\\) \\(\\text{predictive}\\) \\(\\text{value}\\) — precision.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate performance # 4.1) by class precision(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #> 0.7142857 0.8514851   # 4.2) macro-average precision(   actual    = actual,   predicted = predicted,   micro     = FALSE ) #> [1] 0.7828854  # 4.3) micro-average precision(   actual    = actual,   predicted = predicted,   micro     = TRUE ) #> [1] 0.8066667"},{"path":"https://serkor1.github.io/SLmetrics/reference/rae.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{relative}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — rae.numeric","title":"Compute the \\(\\text{relative}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — rae.numeric","text":"rae()-function calculates normalized relative absolute error predicted observed <numeric> vectors. w NULL function returns weighted averages.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{relative}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — rae.numeric","text":"","code":"# S3 method for class 'numeric' rae(actual, predicted, w = NULL, na.rm = FALSE, ...)  rae(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/rae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{relative}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — rae.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{relative}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — rae.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rae.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{relative}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — rae.numeric","text":"Relative Absolute Error (RAE) calculated : $$   \\text{RAE} = \\frac{\\sum_{=1}^n |y_i - \\upsilon_i|}{\\sum_{=1}^n |y_i - \\bar{y}|} $$ \\(y_i\\) actual values, \\(\\upsilon_i\\) predicted values, \\(\\bar{y}\\) mean actual values. weights \\(w_i\\) provided, Weighted RAE calculated : $$   \\text{Weighted RAE} = \\frac{\\sum_{=1}^n w_i |y_i - \\upsilon_i|}{\\sum_{=1}^n w_i |y_i - \\bar{y}_w|} $$ \\(\\bar{y}_w\\) weighted mean actual values, calculated : $$   \\bar{y}_w = \\frac{\\sum_{=1}^n w_i y_i}{\\sum_{=1}^n w_i} $$ metric provides relative measure comparing total absolute prediction error total absolute deviation mean actual values.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/rae.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{relative}\\) \\(\\text{absolute}\\) \\(\\text{error}\\) — rae.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate the metric rae(   actual     = actual,   predicted  = predicted ) #> [1] 0.3654168  # 3) calculate # the weighted metric w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )   rae(   actual     = actual,   predicted  = predicted,   w          = w ) #> [1] 0.3604985"},{"path":"https://serkor1.github.io/SLmetrics/reference/recall.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(recall\\), \\(sensitivity\\) or \\(\\text{true}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — recall.factor","title":"Compute the \\(recall\\), \\(sensitivity\\) or \\(\\text{true}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — recall.factor","text":"recall()-function computes recall, also known sensitivity True Positive Rate (TPR), two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-averaged recall across classes \\(k\\). default, returns class-wise recall.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/recall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(recall\\), \\(sensitivity\\) or \\(\\text{true}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — recall.factor","text":"","code":"# S3 method for class 'factor' recall(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' recall(x, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'factor' sensitivity(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' sensitivity(x, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'factor' tpr(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' tpr(x, micro = NULL, na.rm = TRUE, ...)  recall(...)  sensitivity(...)  tpr(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/recall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(recall\\), \\(sensitivity\\) or \\(\\text{true}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — recall.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/recall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(recall\\), \\(sensitivity\\) or \\(\\text{true}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — recall.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/recall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(recall\\), \\(sensitivity\\) or \\(\\text{true}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — recall.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/recall.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(recall\\), \\(sensitivity\\) or \\(\\text{true}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — recall.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\#TP_k}{\\#TP_k + \\#FN_k} $$ \\(\\#TP_k\\) \\(\\#FN_k\\) number true positives false negatives, respectively, class \\(k\\). aggregate = TRUE micro-average calculated follows, $$   \\frac{\\sum_{k=1}^k \\#TP_k}{\\sum_{k=1}^k \\#TP_k + \\sum_{k=1}^k \\#FN_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/recall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(recall\\), \\(sensitivity\\) or \\(\\text{true}\\) \\(\\text{positive}\\) \\(\\text{rate}\\) — recall.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate performance # 4.1) by class recall(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #>      0.70      0.86   # 4.2) macro-average recall(   actual    = actual,   predicted = predicted,   micro     = FALSE ) #> [1] 0.78  # 4.3) micro-average recall(   actual    = actual,   predicted = predicted,   micro     = TRUE ) #> [1] 0.8066667"},{"path":"https://serkor1.github.io/SLmetrics/reference/rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rmse.numeric","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rmse.numeric","text":"rmse()-function computes simple weighted root mean squared error observed predicted <numeric> vectors. w NULL, function returns weighted root mean squared error.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rmse.numeric","text":"","code":"# S3 method for class 'numeric' rmse(actual, predicted, w = NULL, na.rm = FALSE, ...)  rmse(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rmse.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rmse.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rmse.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rmse.numeric","text":"metric calculated , $$   \\sqrt{\\frac{1}{n} \\sum_i^n (y_i - \\upsilon_i)^2} $$ \\(y_i\\) \\(\\upsilon_i\\) actual predicted values respectively. \\(\\text{w}\\) NULL, weighted version calculated.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/rmse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rmse.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate # the metric rmse(   actual     = actual,   predicted  = predicted ) #> [1] 2.146905  # 3) calculate # the weighted metric # using arbtrary weights w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  rmse(   actual     = actual,   predicted  = predicted,   w          = w ) #> [1] 2.131634"},{"path":"https://serkor1.github.io/SLmetrics/reference/rmsle.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{logarithmic}\\) \\(\\text{error}\\) — rmsle.numeric","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{logarithmic}\\) \\(\\text{error}\\) — rmsle.numeric","text":"rmsle()-function computes simple weighted root mean squared logarithmic error observed predicted <numeric> vectors. w NULL, function returns weighted root mean squared logarithmic error.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rmsle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{logarithmic}\\) \\(\\text{error}\\) — rmsle.numeric","text":"","code":"# S3 method for class 'numeric' rmsle(actual, predicted, w = NULL, na.rm = FALSE, ...)  rmsle(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/rmsle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{logarithmic}\\) \\(\\text{error}\\) — rmsle.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rmsle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{logarithmic}\\) \\(\\text{error}\\) — rmsle.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rmsle.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{logarithmic}\\) \\(\\text{error}\\) — rmsle.numeric","text":"metric calculated , $$   \\sqrt{\\frac{1}{n} \\sum_i^n (\\log(1 + y_i) - \\log(1 + \\upsilon_i))^2} $$ \\(y_i\\) \\(\\upsilon_i\\) actual predicted values respectively. \\(\\text{w}\\) NULL, weighted version calculated.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/rmsle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{logarithmic}\\) \\(\\text{error}\\) — rmsle.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate # the metric rmsle(   actual     = actual,   predicted  = predicted ) #> [1] 0.1055744  # 3) calculate # the weighted metric # using arbtrary weights w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  rmsle(   actual     = actual,   predicted  = predicted,   w          = w ) #> [1] 0.1043836"},{"path":"https://serkor1.github.io/SLmetrics/reference/rrmse.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{relative}\\) \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rrmse.numeric","title":"Compute the \\(\\text{relative}\\) \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rrmse.numeric","text":"rrmse()-function calculates normalized root mean squared error predicted observed <numeric> vectors. w NULL function returns weighted averages.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rrmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{relative}\\) \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rrmse.numeric","text":"","code":"# S3 method for class 'numeric' rrmse(actual, predicted, w = NULL, na.rm = FALSE, ...)  rrmse(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/rrmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{relative}\\) \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rrmse.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rrmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{relative}\\) \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rrmse.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rrmse.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{relative}\\) \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rrmse.numeric","text":"Relative Root Mean Squared Error (RRMSE) calculated : $$   \\text{RRSE} = \\sqrt{\\frac{\\sum_{=1}^n (y_i - \\upsilon_i)^2}{\\sum_{=1}^n (y_i - \\bar{y})^2}} $$ \\(y_i\\) actual values, \\(\\upsilon_i\\) predicted values, \\(\\bar{y}\\) mean actual values. weights \\(w_i\\) provided, Weighted RRSE calculated : $$   \\text{Weighted RRSE} = \\sqrt{\\frac{\\sum_{=1}^n w_i (y_i - \\upsilon_i)^2}{\\sum_{=1}^n w_i (y_i - \\bar{y}_w)^2}} $$ \\(\\bar{y}_w\\) weighted mean actual values, calculated : $$   \\bar{y}_w = \\frac{\\sum_{=1}^n w_i y_i}{\\sum_{=1}^n w_i} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/rrmse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{relative}\\) \\(\\text{root}\\) \\(\\text{mean}\\) \\(\\text{squared}\\) \\(\\text{error}\\) — rrmse.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate the metric rrmse(   actual     = actual,   predicted  = predicted ) #> [1] 0.3619174  # 3) calculate # the weighted metric w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  rrmse(   actual     = actual,   predicted  = predicted,   w          = w ) #> [1] 0.351299"},{"path":"https://serkor1.github.io/SLmetrics/reference/rsq.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(R^2\\) — rsq.numeric","title":"Compute the \\(R^2\\) — rsq.numeric","text":"rsq()-function calculates \\(R^2\\), coefficient determination, ovserved predicted <numeric> vectors. default rsq() returns unadjusted \\(R^2\\). adjusted \\(R^2\\) set \\(k = \\kappa - 1\\), \\(\\kappa\\) number parameters.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rsq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(R^2\\) — rsq.numeric","text":"","code":"# S3 method for class 'numeric' rsq(actual, predicted, k = 0, na.rm = FALSE, ...)  rsq(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/rsq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(R^2\\) — rsq.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. k <numeric>-vector length 1. 0 default. \\(k>0\\) function returns adjusted \\(R^2\\). na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rsq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(R^2\\) — rsq.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/rsq.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(R^2\\) — rsq.numeric","text":"metric calculated follows, $$   R^2 = 1 - \\frac{\\text{SSE}}{\\text{SST}} \\frac{n-1}{n - (k + 1)} $$ \\(\\text{SSE}\\) sum squared errors, \\(\\text{SST}\\) total sum squared errors, \\(n\\) number observations, \\(k\\) number non-constant parameters.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/rsq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(R^2\\) — rsq.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate the metric # with delta 0.5 huberloss(   actual = actual,   predicted = predicted,   delta = 0.5 ) #> [1] 0.7503286  # 3) caclulate weighted # metric using arbitrary weights w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  huberloss(   actual = actual,   predicted = predicted,   delta = 0.5,   w     = w ) #> [1] 0.758954"},{"path":"https://serkor1.github.io/SLmetrics/reference/smape.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{symmetric}\\) \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — smape.numeric","title":"Compute the \\(\\text{symmetric}\\) \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — smape.numeric","text":"smape()-function computes simple weighted symmetric mean absolute percentage error.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/smape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{symmetric}\\) \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — smape.numeric","text":"","code":"# S3 method for class 'numeric' smape(actual, predicted, w = NULL, na.rm = FALSE, ...)  smape(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/smape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{symmetric}\\) \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — smape.numeric","text":"actual <numeric>-vector length \\(n\\). observed (continuous) response variable. predicted <numeric>-vector length \\(n\\). estimated (continuous) response variable. w <numeric>-vector length \\(n\\). weight assigned observation data. See stats::weighted.mean() details. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/smape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{symmetric}\\) \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — smape.numeric","text":"<numeric> vector length 1.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/smape.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{symmetric}\\) \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — smape.numeric","text":"metric calculated follows, $$   \\sum_i^n \\frac{1}{n} \\frac{|y_i - \\upsilon_i|}{\\frac{|y_i|+|\\upsilon_i|}{2}} $$ \\(y_i\\) \\(\\upsilon_i\\) actual predicted values respectively. w NULL, metric calculated using weights.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/smape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{symmetric}\\) \\(\\text{mean}\\) \\(\\text{absolute}\\) \\(\\text{percentage}\\) \\(\\text{error}\\) — smape.numeric","text":"","code":"# 1) fit a linear # regression model <- lm(   mpg ~ .,   data = mtcars )  # 1.1) define actual # and predicted values # to measure performance actual    <- mtcars$mpg predicted <- fitted(model)   # 2) calculate the metric smape(   actual     = actual,   predicted  = predicted ) #> [1] 0.08820889  # 3) calculate # the weighted metric w <- rbeta(   n = 1e3,   shape1 = 10,   shape2 = 2 )  smape(   actual     = actual,   predicted  = predicted,   w          = w ) #> [1] 0.08831856"},{"path":"https://serkor1.github.io/SLmetrics/reference/specificity.html","id":null,"dir":"Reference","previous_headings":"","what":"Specificity or \\(\\text{true}\\) \\(\\text{negative}\\) \\(\\text{rate}\\) — specificity.factor","title":"Specificity or \\(\\text{true}\\) \\(\\text{negative}\\) \\(\\text{rate}\\) — specificity.factor","text":" specificity()-function computes specificity, also known True Negative Rate (TNR) selectivity, two vectors predicted observed factor() values. aggregate = TRUE, function returns micro-average specificity across classes \\(k\\). default, returns class-wise specificity.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/specificity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specificity or \\(\\text{true}\\) \\(\\text{negative}\\) \\(\\text{rate}\\) — specificity.factor","text":"","code":"# S3 method for class 'factor' specificity(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' specificity(x, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'factor' tnr(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' tnr(x, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'factor' selectivity(actual, predicted, micro = NULL, na.rm = TRUE, ...)  # S3 method for class 'cmatrix' selectivity(x, micro = NULL, na.rm = TRUE, ...)  specificity(...)  tnr(...)  selectivity(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/specificity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specificity or \\(\\text{true}\\) \\(\\text{negative}\\) \\(\\text{rate}\\) — specificity.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. micro <logical>-value length \\(1\\). NULL default. TRUE returns micro average across \\(k\\) classes, FALSE returns macro average. Otherwise class wise performance evaluation. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/specificity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specificity or \\(\\text{true}\\) \\(\\text{negative}\\) \\(\\text{rate}\\) — specificity.factor","text":"aggregate FALSE (default), named <numeric>-vector length k aggregate TRUE, <numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/specificity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specificity or \\(\\text{true}\\) \\(\\text{negative}\\) \\(\\text{rate}\\) — specificity.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/specificity.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Specificity or \\(\\text{true}\\) \\(\\text{negative}\\) \\(\\text{rate}\\) — specificity.factor","text":"metric calculated class \\(k\\) follows, $$   \\frac{\\#TN_k}{\\#TN_k+\\#FP_k} $$ \\(\\#TN_k\\) \\(\\#FP_k\\) number true negatives false positives, respectively, class \\(k\\). aggregate = TRUE micro-average calculated, $$   \\frac{\\sum_{k=1}^k \\#TN_k}{\\sum_{k=1}^k \\#TN_k + \\sum_{k=1}^k \\#FP_k} $$","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/specificity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specificity or \\(\\text{true}\\) \\(\\text{negative}\\) \\(\\text{rate}\\) — specificity.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) evaluate performance # 4.1) by class specificity(   actual    = actual,   predicted = predicted ) #> Virginica    Others  #>      0.86      0.70   # 4.2) macro-average specificity(   actual    = actual,   predicted = predicted,   micro     = FALSE ) #> [1] 0.78  # 4.3) micro-average specificity(   actual    = iris$Species,   predicted = predicted,   micro     = TRUE ) #> [1] 0.62"},{"path":"https://serkor1.github.io/SLmetrics/reference/zerooneloss.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the \\(\\text{Zero}\\)-\\(\\text{One}\\) \\(\\text{Loss}\\) — zerooneloss.factor","title":"Compute the \\(\\text{Zero}\\)-\\(\\text{One}\\) \\(\\text{Loss}\\) — zerooneloss.factor","text":"zerooneloss()-function computes Zero-One Loss, classification loss function calculates proportion misclassified instances two vectors predicted observed factor() values.","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/zerooneloss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the \\(\\text{Zero}\\)-\\(\\text{One}\\) \\(\\text{Loss}\\) — zerooneloss.factor","text":"","code":"# S3 method for class 'factor' zerooneloss(actual, predicted, na.rm = FALSE, ...)  # S3 method for class 'cmatrix' zerooneloss(x, ...)  zerooneloss(...)"},{"path":"https://serkor1.github.io/SLmetrics/reference/zerooneloss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the \\(\\text{Zero}\\)-\\(\\text{One}\\) \\(\\text{Loss}\\) — zerooneloss.factor","text":"actual <factor>-vector length \\(n\\), \\(k\\) levels. predicted <factor>-vector length \\(n\\), \\(k\\) levels. na.rm <logical>-value length \\(1\\). FALSE default. TRUE NA values removed computation. ... Arguments passed methods. x confusion matrix created table() cmatrix()","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/zerooneloss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the \\(\\text{Zero}\\)-\\(\\text{One}\\) \\(\\text{Loss}\\) — zerooneloss.factor","text":"<numeric>-vector length 1","code":""},{"path":"https://serkor1.github.io/SLmetrics/reference/zerooneloss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the \\(\\text{Zero}\\)-\\(\\text{One}\\) \\(\\text{Loss}\\) — zerooneloss.factor","text":"Consider classification problem three classes: , B, C. actual vector factor() values defined follows:   , values 1, 2, 3 mapped , B, C, respectively. Now, suppose model predict B's. predicted vector factor() values defined follows:   cases, \\(k = 3\\), determined indirectly levels argument.","code":"## set seed set.seed(1903)  ## actual factor(   x = sample(x = 1:3, size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] B A B B A C B C C A #> Levels: A B C ## set seed set.seed(1903)  ## predicted factor(   x = sample(x = c(1, 3), size = 10, replace = TRUE),   levels = c(1, 2, 3),   labels = c(\"A\", \"B\", \"C\") ) #>  [1] C A C C C C C C A C #> Levels: A B C"},{"path":"https://serkor1.github.io/SLmetrics/reference/zerooneloss.html","id":"calculation","dir":"Reference","previous_headings":"","what":"Calculation","title":"Compute the \\(\\text{Zero}\\)-\\(\\text{One}\\) \\(\\text{Loss}\\) — zerooneloss.factor","text":"Zero-One Loss global metric measures proportion incorrect predictions made model. calculated follows, $$   \\frac{\\#FP + \\#FN}{\\#TP + \\#TN + \\#FP + \\#FN} $$ \\(\\#TP\\), \\(\\#TN\\), \\(\\#FP\\), \\(\\#FN\\) represent true positives, true negatives, false positives, false negatives, respectively. Zero-One Loss provides overall measure model's prediction errors across classes.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/reference/zerooneloss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the \\(\\text{Zero}\\)-\\(\\text{One}\\) \\(\\text{Loss}\\) — zerooneloss.factor","text":"","code":"# 1) recode Iris # to binary classification # problem iris$species_num <- as.numeric(   iris$Species == \"virginica\" )  # 2) fit the logistic # regression model <- glm(   formula = species_num ~ Sepal.Length + Sepal.Width,   data    = iris,   family  = binomial(     link = \"logit\"   ) )  # 3) generate predicted # classes predicted <- factor(   as.numeric(     predict(model, type = \"response\") > 0.5   ),   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 3.1) generate actual # classes actual <- factor(   x = iris$species_num,   levels = c(1,0),   labels = c(\"Virginica\", \"Others\") )  # 4) Zero-One Loss zerooneloss(   actual    = actual,   predicted = predicted ) #> [1] 0.1933333"},{"path":"https://serkor1.github.io/SLmetrics/news/index.html","id":"version-01-1","dir":"Changelog","previous_headings":"","what":"Version 0.1-1","title":"Version 0.1-1","text":"Version 0.1-1 considered pre-release {SLmetrics}. expect breaking changes, unless major bug/issue reported nature forces breaking changes.","code":""},{"path":"https://serkor1.github.io/SLmetrics/news/index.html","id":"general-0-1-1","dir":"Changelog","previous_headings":"","what":"General","title":"Version 0.1-1","text":"Backend changes: pair-wise metrics arer moved {Rcpp} C++, reduced execution time half. pair-wise metrics now faster.","code":""},{"path":"https://serkor1.github.io/SLmetrics/news/index.html","id":"improvements-0-1-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"Version 0.1-1","text":"NA-controls: pair-wise metrics doesn’t micro-argument handling missing values according C++ {Rcpp} internals. See Issue. Thank @EmilHvitfeldt pointing . now fixed functions uses na.rm-argument explicitly control . See ,","code":"# 1) define factors actual    <- factor(c(\"yes\", \"no\")) predicted <- factor(c(NA, \"no\"))  # 2) accuracy with na.rm = TRUE SLmetrics::accuracy(     actual    = actual,     predicted = predicted,     na.rm     = TRUE ) #> [1] 1 # 2) accuracy with na.rm = FALSE SLmetrics::accuracy(     actual    = actual,     predicted = predicted,     na.rm     = FALSE ) #> [1] NaN"},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/news/index.html","id":"general-0-1-0","dir":"Changelog","previous_headings":"","what":"General","title":"Version 0.1-0","text":"{SLmetrics} collection Machine Learning performance evaluation functions supervised learning. Visit online documentation GitHub Pages.","code":""},{"path":[]},{"path":"https://serkor1.github.io/SLmetrics/news/index.html","id":"supervised-classification-metrics-0-1-0","dir":"Changelog","previous_headings":"Examples","what":"Supervised classification metrics","title":"Version 0.1-0","text":"","code":"# 1) actual classes print(     actual <- factor(         sample(letters[1:3], size = 10, replace = TRUE)     ) ) #>  [1] b a b b a c b c c a #> Levels: a b c # 2) predicted classes print(     predicted <- factor(         sample(letters[1:3], size = 10, replace = TRUE)     ) ) #>  [1] c c a b a b c c a c #> Levels: a b c # 1) calculate confusion # matrix and summarise # it summary(     confusion_matrix <- SLmetrics::cmatrix(         actual    = actual,         predicted = predicted     ) ) #> Confusion Matrix (3 x 3)  #> ================================================================================ #>   a b c #> a 1 0 2 #> b 1 1 2 #> c 1 1 1 #> ================================================================================ #> Overall Statistics (micro average) #>  - Accuracy:          0.30 #>  - Balanced Accuracy: 0.31 #>  - Sensitivity:       0.30 #>  - Specificity:       0.65 #>  - Precision:         0.30 # 2) calculate false positive # rate using micro average SLmetrics::fpr(     confusion_matrix ) #>         a         b         c  #> 0.2857143 0.1666667 0.5714286"},{"path":"https://serkor1.github.io/SLmetrics/news/index.html","id":"supervised-regression-metrics-0-1-0","dir":"Changelog","previous_headings":"Examples","what":"Supervised regression metrics","title":"Version 0.1-0","text":"","code":"# 1) actual values actual <- rnorm(n = 100)  # 2) predicted values predicted <- actual + rnorm(n = 100) # 1) calculate # huber loss SLmetrics::huberloss(     actual    = actual,     predicted = predicted ) #> [1] 0.394088"}]
